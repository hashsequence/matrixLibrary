"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const store_1 = require("./store");
class BenchmarkEnvironment {
    constructor(config, context) {
        var _a;
        const { testEnvironment, testEnvironmentOptions } = config.projectConfig.testEnvironmentOptions;
        let envModule = testEnvironment || "jest-environment-node";
        if (envModule === "jsdom") {
            envModule = "jest-environment-jsdom";
        }
        if (envModule === "node") {
            envModule = "jest-environment-node";
        }
        config = Object.assign(Object.assign({}, config), { projectConfig: Object.assign(Object.assign({}, config.projectConfig), { testEnvironment: envModule, testEnvironmentOptions: testEnvironmentOptions || {} }) });
        const clsImport = require(envModule);
        const cls = (_a = clsImport.default) !== null && _a !== void 0 ? _a : clsImport;
        const env = new cls(config, context);
        this.global = env.global || global;
        (0, store_1.createStore)(this.global);
        this.fakeTimers = env.fakeTimers || null;
        this.moduleMocker = env.moduleMocker || null;
        this.fakeTimersModern = env.fakeTimersModern || null;
        this._rootDir = config.globalConfig.rootDir;
        if (env.getVmContext) {
            function getVmContext() {
                return env.getVmContext();
            }
            Object.defineProperty(this, "getVmContext", {
                value: getVmContext.bind(this),
                writable: false,
            });
        }
        if (env.handleTestEvent) {
            function handleTestEvent(event, state) {
                return env.handleTestEvent(event, state);
            }
            Object.defineProperty(this, "handleTestEvent", {
                value: handleTestEvent.bind(this),
                writable: false,
            });
        }
        this.env = env;
    }
    setup() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.env.setup();
        });
    }
    get resultFile() {
        return path.join(this._rootDir, "benchmarks", "result.txt");
    }
    teardown() {
        return __awaiter(this, void 0, void 0, function* () {
            const store = (0, store_1.getStore)(this.global);
            const fileName = this.resultFile;
            const folder = path.dirname(fileName);
            if (!fs.existsSync(folder)) {
                fs.mkdirSync(folder);
            }
            if (!fs.existsSync(fileName)) {
                fs.writeFileSync(fileName, "");
            }
            fs.appendFileSync(fileName, "\n" + JSON.stringify(store));
            yield this.env.teardown();
            this.global = null;
            this.fakeTimers = null;
            this.fakeTimersModern = null;
        });
    }
    runScript(script) {
        return this.env.runScript(script);
    }
}
exports.default = BenchmarkEnvironment;
//# sourceMappingURL=environment.js.map